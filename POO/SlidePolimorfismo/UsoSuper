class Animal {
    private String nome;

    public Animal(String nome) {
        this.nome = nome;
    }

    protected void setNome(String nome) {
        this.nome = nome;
    }

    public void emitirSom() {
        System.out.println("Animal faz um som.");
    }
}

class Cachorro extends Animal {
    private String raca;

    public Cachorro(String nome, String raca) {
        super(nome); // Chama o construtor da superclasse para inicializar o atributo "nome".
        this.raca = raca;
    }

    public void setNomeDoCachorro(String nome) {
        setNome(nome); // Usando o método da superclasse para definir o nome do cachorro.
    }

    // Resto da implementação...
}


/*
Tanto super.setNome(nome) quanto setNome(nome) funcionariam nesse caso. O uso de super é 
necessário apenas quando há um potencial conflito entre membros de uma classe e seus homônimos 
na superclasse. Em muitos casos, o uso de super é opcional. No entanto, incluí-lo pode tornar 
o código mais explícito e claro, especialmente quando há um nome de membro na subclasse que é 
igual ao da superclasse.
*/
